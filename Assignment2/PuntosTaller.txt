
Punto 6.) --Create a stored procedure which accepts the id of vehicle as argument, inside the procedure you should:
	--a. Call the function to assign the name of the service
	--b. If the string is not empty, create a new service for that vehicle in status "Pending", current
		--date, the description field should contains next text "Mandatory '9000_service' service; current
		--mileage '9123'". 
		--If the string is empty do nothing.
	--c. Associate all the types of services to the service, for each type of service the status column
	--must have the value "Pending". (0.5)

--DROP PROCEDURE ASSOCIATE_SERVICES_VEHICLE(VEH_ID IN VEHICLE.IDVEHICLE%TYPE)
	
CREATE OR REPLACE PROCEDURE ASSOCIATE_SERVICES_VEHICLE(VEH_ID IN VEHICLE.IDVEHICLE%TYPE) AS

	MILEAGE_SERVICE VARCHAR(20) := '';
	VEHICLE_MILEAGE VEHICLE.MILEAGE%TYPE;
	STATUS_SERVICE VARCHAR(30) := 'Pending';
	STATUS_SERVICE_DETAILS VARCHAR(30) := 'Pending';
	DESCRIPTION VARCHAR2(100) := '';
BEGIN

	MILEAGE_SERVICE := ASSIGN_NAME_OF_THE_SERVICE(VEH_ID);
	
  DBMS_OUTPUT.PUT_LINE('Respuesta de la función: ' || MILEAGE_SERVICE);
  
	IF MILEAGE_SERVICE IS NOT NULL THEN
		--GET THE CURRENT MILEAGE FROM VEHICLE
		SELECT MILEAGE INTO VEHICLE_MILEAGE FROM VEHICLE WHERE IDVEHICLE = VEH_ID;
		
		--THE DESCRIPTION TO INSERT
		DESCRIPTION := 'Mandatory ' || MILEAGE_SERVICE || ' service; current mileage ' || VEHICLE_MILEAGE;
		
		--INSERT TO SERVICE TABLE
		DBMS_OUTPUT.PUT_LINE('INSERTANDO EL SERVICIO...');
		INSERT INTO SERVICE (SERVICE.FK_IDVEHICLE,SERVICE.NAME_SERVICE,SERVICE.DATE_ISSUE,SERVICE.DESCRIPTION,SERVICE.STATUS_SERVICE) 
			VALUES (VEH_ID, DESCRIPTION, SYSDATE, NULL, STATUS_SERVICE);
		
		--INSERT TO DETAILS OF SERVICE
		DBMS_OUTPUT.PUT_LINE('INSERTANDO LOS DETALLES DEL SERVICIO...');
		FOR TYPE_SERVICE IN (SELECT * FROM TYPE_OF_SERVICE)
		LOOP
			INSERT INTO DETAIL_SERVICE(DETAIL_SERVICE.FK_IDSERVICE,DETAIL_SERVICE.FK_IDTYPES_OF_SERVICE,DETAIL_SERVICE.SERVICE_DETAILS_STATUS) 
				VALUES (SEQ_Service.CURRVAL, TYPE_SERVICE.IDTYPE_OF_SERVICE, STATUS_SERVICE_DETAILS);
	    END LOOP;
		
	END IF;
  
  DBMS_OUTPUT.PUT_LINE('PROCEDIMIENTO EJECUTADO...');
END;


-----------------------------------------------------------------------------------------------------------------------



Punto 8.) --Create a stored procedure to decrease the current value of vehicles as follows:
	--a. If the class of vehicle is Moped, Motorcycle and Trike motorcycle 2% of the current value.
	--b. If the class of vehicle is Car, Light rigid heavy vehicle, Medium rigid heavy vehicle 3% of the urrent value.
	--c. Otherwise 5% of the current value.
	--d. Only "manager_profile" is allowed to run the procedure and should print at the end "Number of
	--vehicles updated successfully: xx" (0.5)
  
	--DROP PROCEDURE DECREASE_CURRENT_VALUE_VEH
CREATE OR REPLACE PROCEDURE DECREASE_CURRENT_VALUE_VEH AS
	VEHICLES_UPDATE NUMBER := 0;--VARIABLE PARA CONTAR LOS VEHICULOS A ACTUALIZAR
	--CONSULTA TODOS LOS VEHICULOS CON TIPO
	CURSOR get_VEHICLES_TYPE IS 
	SELECT 
		VEHICLE.IDVEHICLE,
		TYPE_OF_VEHICLE.DESCRIPTION
	FROM VEHICLE
		INNER JOIN TYPE_OF_VEHICLE ON TYPE_OF_VEHICLE.IDTYPE_OF_VEHICLE = VEHICLE.FK_IDTYPE_OF_VEHICLE;
	RECORDS get_VEHICLES_TYPE%ROWTYPE;
	BEGIN
	--SE RECORRE EL CURSOR
	FOR objVEHICULO in get_VEHICLES_TYPE LOOP
		--SI EL VEHICULO ES DE TIPO IN ('Moped', 'Motorcycle', 'Trike motorcycle'), SE LE REDUCE EL VALOR EN UN 2%
		IF objVEHICULO.DESCRIPTION IN ('Moped', 'Motorcycle', 'Trike motorcycle') THEN
			UPDATE VEHICLE SET CURRENT_VALUE = CURRENT_VALUE-(CURRENT_VALUE*0.02)
			WHERE VEHICLE.IDVEHICLE = objVEHICULO.IDVEHICLE;
			--SI EL VEHICULO ES DE TIPO IN ('Car', 'Light rigid heavy vehicle', 'Medium rigid heavy vehicle'), SE LE REDUCE EL VALOR EN UN 3%
		ELSE IF objVEHICULO.DESCRIPTION IN ('Car', 'Light rigid heavy vehicle', 'Medium rigid heavy vehicle') THEN
			UPDATE VEHICLE SET CURRENT_VALUE = CURRENT_VALUE-(CURRENT_VALUE*0.03)
			WHERE VEHICLE.IDVEHICLE = objVEHICULO.IDVEHICLE;
			--DE LO CONTRARIO, SE LE REDUCE EL VALOR EN UN 3%
		ELSE 
			UPDATE VEHICLE SET CURRENT_VALUE = CURRENT_VALUE-(CURRENT_VALUE*0.05)
			WHERE VEHICLE.IDVEHICLE = objVEHICULO.IDVEHICLE;
		END IF;
		END IF;
		VEHICLES_UPDATE := VEHICLES_UPDATE +1;
	END LOOP;
	--SE IMPRIME EL NRO DE VEHICULOS ACTUALIZADOS
	DBMS_OUTPUT.PUT_LINE
		('vehicles updated successfully: '|| VEHICLES_UPDATE);
END;

